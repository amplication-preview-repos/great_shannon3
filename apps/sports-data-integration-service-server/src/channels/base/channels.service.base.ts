/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Channels as PrismaChannels,
  Posts as PrismaPosts,
} from "@prisma/client";

export class ChannelsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChannelsCountArgs, "select">): Promise<number> {
    return this.prisma.channels.count(args);
  }

  async channelsItems(
    args: Prisma.ChannelsFindManyArgs
  ): Promise<PrismaChannels[]> {
    return this.prisma.channels.findMany(args);
  }
  async channels(
    args: Prisma.ChannelsFindUniqueArgs
  ): Promise<PrismaChannels | null> {
    return this.prisma.channels.findUnique(args);
  }
  async createChannels(
    args: Prisma.ChannelsCreateArgs
  ): Promise<PrismaChannels> {
    return this.prisma.channels.create(args);
  }
  async updateChannels(
    args: Prisma.ChannelsUpdateArgs
  ): Promise<PrismaChannels> {
    return this.prisma.channels.update(args);
  }
  async deleteChannels(
    args: Prisma.ChannelsDeleteArgs
  ): Promise<PrismaChannels> {
    return this.prisma.channels.delete(args);
  }

  async findPostsItems(
    parentId: string,
    args: Prisma.PostsFindManyArgs
  ): Promise<PrismaPosts[]> {
    return this.prisma.channels
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .postsItems(args);
  }
}
