/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Channels } from "./Channels";
import { ChannelsCountArgs } from "./ChannelsCountArgs";
import { ChannelsFindManyArgs } from "./ChannelsFindManyArgs";
import { ChannelsFindUniqueArgs } from "./ChannelsFindUniqueArgs";
import { CreateChannelsArgs } from "./CreateChannelsArgs";
import { UpdateChannelsArgs } from "./UpdateChannelsArgs";
import { DeleteChannelsArgs } from "./DeleteChannelsArgs";
import { PostsFindManyArgs } from "../../posts/base/PostsFindManyArgs";
import { Posts } from "../../posts/base/Posts";
import { ChannelsService } from "../channels.service";
@graphql.Resolver(() => Channels)
export class ChannelsResolverBase {
  constructor(protected readonly service: ChannelsService) {}

  async _channelsItemsMeta(
    @graphql.Args() args: ChannelsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Channels])
  async channelsItems(
    @graphql.Args() args: ChannelsFindManyArgs
  ): Promise<Channels[]> {
    return this.service.channelsItems(args);
  }

  @graphql.Query(() => Channels, { nullable: true })
  async channels(
    @graphql.Args() args: ChannelsFindUniqueArgs
  ): Promise<Channels | null> {
    const result = await this.service.channels(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Channels)
  async createChannels(
    @graphql.Args() args: CreateChannelsArgs
  ): Promise<Channels> {
    return await this.service.createChannels({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Channels)
  async updateChannels(
    @graphql.Args() args: UpdateChannelsArgs
  ): Promise<Channels | null> {
    try {
      return await this.service.updateChannels({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Channels)
  async deleteChannels(
    @graphql.Args() args: DeleteChannelsArgs
  ): Promise<Channels | null> {
    try {
      return await this.service.deleteChannels(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Posts], { name: "postsItems" })
  async findPostsItems(
    @graphql.Parent() parent: Channels,
    @graphql.Args() args: PostsFindManyArgs
  ): Promise<Posts[]> {
    const results = await this.service.findPostsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
