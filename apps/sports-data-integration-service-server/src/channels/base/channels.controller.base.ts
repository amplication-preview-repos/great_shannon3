/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChannelsService } from "../channels.service";
import { ChannelsCreateInput } from "./ChannelsCreateInput";
import { Channels } from "./Channels";
import { ChannelsFindManyArgs } from "./ChannelsFindManyArgs";
import { ChannelsWhereUniqueInput } from "./ChannelsWhereUniqueInput";
import { ChannelsUpdateInput } from "./ChannelsUpdateInput";
import { PostsFindManyArgs } from "../../posts/base/PostsFindManyArgs";
import { Posts } from "../../posts/base/Posts";
import { PostsWhereUniqueInput } from "../../posts/base/PostsWhereUniqueInput";

export class ChannelsControllerBase {
  constructor(protected readonly service: ChannelsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Channels })
  async createChannels(
    @common.Body() data: ChannelsCreateInput
  ): Promise<Channels> {
    return await this.service.createChannels({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        telegramChatId: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Channels] })
  @ApiNestedQuery(ChannelsFindManyArgs)
  async channelsItems(@common.Req() request: Request): Promise<Channels[]> {
    const args = plainToClass(ChannelsFindManyArgs, request.query);
    return this.service.channelsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        telegramChatId: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Channels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async channels(
    @common.Param() params: ChannelsWhereUniqueInput
  ): Promise<Channels | null> {
    const result = await this.service.channels({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        telegramChatId: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Channels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChannels(
    @common.Param() params: ChannelsWhereUniqueInput,
    @common.Body() data: ChannelsUpdateInput
  ): Promise<Channels | null> {
    try {
      return await this.service.updateChannels({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          telegramChatId: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Channels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChannels(
    @common.Param() params: ChannelsWhereUniqueInput
  ): Promise<Channels | null> {
    try {
      return await this.service.deleteChannels({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          telegramChatId: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/postsItems")
  @ApiNestedQuery(PostsFindManyArgs)
  async findPostsItems(
    @common.Req() request: Request,
    @common.Param() params: ChannelsWhereUniqueInput
  ): Promise<Posts[]> {
    const query = plainToClass(PostsFindManyArgs, request.query);
    const results = await this.service.findPostsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        uniqueHash: true,
        title: true,

        sport: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/postsItems")
  async connectPostsItems(
    @common.Param() params: ChannelsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        connect: body,
      },
    };
    await this.service.updateChannels({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/postsItems")
  async updatePostsItems(
    @common.Param() params: ChannelsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        set: body,
      },
    };
    await this.service.updateChannels({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/postsItems")
  async disconnectPostsItems(
    @common.Param() params: ChannelsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        disconnect: body,
      },
    };
    await this.service.updateChannels({
      where: params,
      data,
      select: { id: true },
    });
  }
}
