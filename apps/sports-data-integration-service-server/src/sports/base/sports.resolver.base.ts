/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sports } from "./Sports";
import { SportsCountArgs } from "./SportsCountArgs";
import { SportsFindManyArgs } from "./SportsFindManyArgs";
import { SportsFindUniqueArgs } from "./SportsFindUniqueArgs";
import { CreateSportsArgs } from "./CreateSportsArgs";
import { UpdateSportsArgs } from "./UpdateSportsArgs";
import { DeleteSportsArgs } from "./DeleteSportsArgs";
import { PostsFindManyArgs } from "../../posts/base/PostsFindManyArgs";
import { Posts } from "../../posts/base/Posts";
import { SportsService } from "../sports.service";
@graphql.Resolver(() => Sports)
export class SportsResolverBase {
  constructor(protected readonly service: SportsService) {}

  async _sportsItemsMeta(
    @graphql.Args() args: SportsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sports])
  async sportsItems(
    @graphql.Args() args: SportsFindManyArgs
  ): Promise<Sports[]> {
    return this.service.sportsItems(args);
  }

  @graphql.Query(() => Sports, { nullable: true })
  async sports(
    @graphql.Args() args: SportsFindUniqueArgs
  ): Promise<Sports | null> {
    const result = await this.service.sports(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sports)
  async createSports(@graphql.Args() args: CreateSportsArgs): Promise<Sports> {
    return await this.service.createSports({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sports)
  async updateSports(
    @graphql.Args() args: UpdateSportsArgs
  ): Promise<Sports | null> {
    try {
      return await this.service.updateSports({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sports)
  async deleteSports(
    @graphql.Args() args: DeleteSportsArgs
  ): Promise<Sports | null> {
    try {
      return await this.service.deleteSports(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Posts], { name: "postsItems" })
  async findPostsItems(
    @graphql.Parent() parent: Sports,
    @graphql.Args() args: PostsFindManyArgs
  ): Promise<Posts[]> {
    const results = await this.service.findPostsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
