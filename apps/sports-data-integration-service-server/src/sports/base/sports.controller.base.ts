/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SportsService } from "../sports.service";
import { SportsCreateInput } from "./SportsCreateInput";
import { Sports } from "./Sports";
import { SportsFindManyArgs } from "./SportsFindManyArgs";
import { SportsWhereUniqueInput } from "./SportsWhereUniqueInput";
import { SportsUpdateInput } from "./SportsUpdateInput";
import { PostsFindManyArgs } from "../../posts/base/PostsFindManyArgs";
import { Posts } from "../../posts/base/Posts";
import { PostsWhereUniqueInput } from "../../posts/base/PostsWhereUniqueInput";

export class SportsControllerBase {
  constructor(protected readonly service: SportsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sports })
  async createSports(@common.Body() data: SportsCreateInput): Promise<Sports> {
    return await this.service.createSports({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sports] })
  @ApiNestedQuery(SportsFindManyArgs)
  async sportsItems(@common.Req() request: Request): Promise<Sports[]> {
    const args = plainToClass(SportsFindManyArgs, request.query);
    return this.service.sportsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sports })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sports(
    @common.Param() params: SportsWhereUniqueInput
  ): Promise<Sports | null> {
    const result = await this.service.sports({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sports })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSports(
    @common.Param() params: SportsWhereUniqueInput,
    @common.Body() data: SportsUpdateInput
  ): Promise<Sports | null> {
    try {
      return await this.service.updateSports({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sports })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSports(
    @common.Param() params: SportsWhereUniqueInput
  ): Promise<Sports | null> {
    try {
      return await this.service.deleteSports({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/postsItems")
  @ApiNestedQuery(PostsFindManyArgs)
  async findPostsItems(
    @common.Req() request: Request,
    @common.Param() params: SportsWhereUniqueInput
  ): Promise<Posts[]> {
    const query = plainToClass(PostsFindManyArgs, request.query);
    const results = await this.service.findPostsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        uniqueHash: true,
        title: true,

        sport: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/postsItems")
  async connectPostsItems(
    @common.Param() params: SportsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        connect: body,
      },
    };
    await this.service.updateSports({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/postsItems")
  async updatePostsItems(
    @common.Param() params: SportsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        set: body,
      },
    };
    await this.service.updateSports({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/postsItems")
  async disconnectPostsItems(
    @common.Param() params: SportsWhereUniqueInput,
    @common.Body() body: PostsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      postsItems: {
        disconnect: body,
      },
    };
    await this.service.updateSports({
      where: params,
      data,
      select: { id: true },
    });
  }
}
