/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sports as PrismaSports,
  Posts as PrismaPosts,
} from "@prisma/client";

export class SportsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SportsCountArgs, "select">): Promise<number> {
    return this.prisma.sports.count(args);
  }

  async sportsItems(args: Prisma.SportsFindManyArgs): Promise<PrismaSports[]> {
    return this.prisma.sports.findMany(args);
  }
  async sports(
    args: Prisma.SportsFindUniqueArgs
  ): Promise<PrismaSports | null> {
    return this.prisma.sports.findUnique(args);
  }
  async createSports(args: Prisma.SportsCreateArgs): Promise<PrismaSports> {
    return this.prisma.sports.create(args);
  }
  async updateSports(args: Prisma.SportsUpdateArgs): Promise<PrismaSports> {
    return this.prisma.sports.update(args);
  }
  async deleteSports(args: Prisma.SportsDeleteArgs): Promise<PrismaSports> {
    return this.prisma.sports.delete(args);
  }

  async findPostsItems(
    parentId: string,
    args: Prisma.PostsFindManyArgs
  ): Promise<PrismaPosts[]> {
    return this.prisma.sports
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .postsItems(args);
  }
}
