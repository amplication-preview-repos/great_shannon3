/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Posts } from "./Posts";
import { PostsCountArgs } from "./PostsCountArgs";
import { PostsFindManyArgs } from "./PostsFindManyArgs";
import { PostsFindUniqueArgs } from "./PostsFindUniqueArgs";
import { CreatePostsArgs } from "./CreatePostsArgs";
import { UpdatePostsArgs } from "./UpdatePostsArgs";
import { DeletePostsArgs } from "./DeletePostsArgs";
import { Sports } from "../../sports/base/Sports";
import { Channels } from "../../channels/base/Channels";
import { PostsService } from "../posts.service";
@graphql.Resolver(() => Posts)
export class PostsResolverBase {
  constructor(protected readonly service: PostsService) {}

  async _postsItemsMeta(
    @graphql.Args() args: PostsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Posts])
  async postsItems(@graphql.Args() args: PostsFindManyArgs): Promise<Posts[]> {
    return this.service.postsItems(args);
  }

  @graphql.Query(() => Posts, { nullable: true })
  async posts(
    @graphql.Args() args: PostsFindUniqueArgs
  ): Promise<Posts | null> {
    const result = await this.service.posts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Posts)
  async createPosts(@graphql.Args() args: CreatePostsArgs): Promise<Posts> {
    return await this.service.createPosts({
      ...args,
      data: {
        ...args.data,

        sport: args.data.sport
          ? {
              connect: args.data.sport,
            }
          : undefined,

        channel: args.data.channel
          ? {
              connect: args.data.channel,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Posts)
  async updatePosts(
    @graphql.Args() args: UpdatePostsArgs
  ): Promise<Posts | null> {
    try {
      return await this.service.updatePosts({
        ...args,
        data: {
          ...args.data,

          sport: args.data.sport
            ? {
                connect: args.data.sport,
              }
            : undefined,

          channel: args.data.channel
            ? {
                connect: args.data.channel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Posts)
  async deletePosts(
    @graphql.Args() args: DeletePostsArgs
  ): Promise<Posts | null> {
    try {
      return await this.service.deletePosts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sports, {
    nullable: true,
    name: "sport",
  })
  async getSport(@graphql.Parent() parent: Posts): Promise<Sports | null> {
    const result = await this.service.getSport(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Channels, {
    nullable: true,
    name: "channel",
  })
  async getChannel(@graphql.Parent() parent: Posts): Promise<Channels | null> {
    const result = await this.service.getChannel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
