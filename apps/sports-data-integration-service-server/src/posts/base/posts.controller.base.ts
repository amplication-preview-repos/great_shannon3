/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostsService } from "../posts.service";
import { PostsCreateInput } from "./PostsCreateInput";
import { Posts } from "./Posts";
import { PostsFindManyArgs } from "./PostsFindManyArgs";
import { PostsWhereUniqueInput } from "./PostsWhereUniqueInput";
import { PostsUpdateInput } from "./PostsUpdateInput";

export class PostsControllerBase {
  constructor(protected readonly service: PostsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Posts })
  async createPosts(@common.Body() data: PostsCreateInput): Promise<Posts> {
    return await this.service.createPosts({
      data: {
        ...data,

        sport: data.sport
          ? {
              connect: data.sport,
            }
          : undefined,

        channel: data.channel
          ? {
              connect: data.channel,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        uniqueHash: true,
        title: true,

        sport: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Posts] })
  @ApiNestedQuery(PostsFindManyArgs)
  async postsItems(@common.Req() request: Request): Promise<Posts[]> {
    const args = plainToClass(PostsFindManyArgs, request.query);
    return this.service.postsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        uniqueHash: true,
        title: true,

        sport: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Posts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posts(
    @common.Param() params: PostsWhereUniqueInput
  ): Promise<Posts | null> {
    const result = await this.service.posts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        uniqueHash: true,
        title: true,

        sport: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Posts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosts(
    @common.Param() params: PostsWhereUniqueInput,
    @common.Body() data: PostsUpdateInput
  ): Promise<Posts | null> {
    try {
      return await this.service.updatePosts({
        where: params,
        data: {
          ...data,

          sport: data.sport
            ? {
                connect: data.sport,
              }
            : undefined,

          channel: data.channel
            ? {
                connect: data.channel,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          uniqueHash: true,
          title: true,

          sport: {
            select: {
              id: true,
            },
          },

          channel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Posts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosts(
    @common.Param() params: PostsWhereUniqueInput
  ): Promise<Posts | null> {
    try {
      return await this.service.deletePosts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          uniqueHash: true,
          title: true,

          sport: {
            select: {
              id: true,
            },
          },

          channel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
